---
layout: post
title: JDBC
date: 2020-02-18
---

## 2020-2-18-JDBC

* 首先是插入语句必须加上‘字符串’，这就意味着sql语句出现了反人类的“‘”

  我只想说杰斯吗 
  

#### JDBC简介

> * JDBC是Java语言提供访问和操作数据库的一种途径
>
> * 通过使用JDBC可以操作任意的SQL语句来访问和操作数据库：
>
>   - DML ：Data Manipulation Language 数据操纵语言（对数据库中的数据进行增删改查操作等）
>
>     - select ： retrieve data from a table
>     
>       ```
>        select [column_name] from [table_name] where;
>       ```
>     
>     - insert ： insert data into a table
>     
>       ```
>        insert into [table_name] values(columns);
>       ```
>     
>     - update ： update existing data with a table
>     
>       ```
>       update [table_name] set [column_name] = [value] where; 
>       ```
>     
>     - delete ： delete the record from a table, the space for the record remain
>     
>       ```
>       # 删除表中的某一行或几行数据
>        delete from [table_name] where ;
>        # 删除表中的所有记录，但是表的空间仍然保留
>        delete from [table_name]
>       ```
>     
>     - call ： call a PL/SQL or Java subprogram
>     
>       ```
>       exec procedure;# 只能在sqlplus中使用
>       call transation...;# 任何工具都可以使用 但记得{call..}
>       ```
>     
>     - explain plan ： explain  access path to data
>     
>     - lock table ： 读写锁，防止read dirty data
>     
>   - DDL ：Data Definition Language 数据定义语言（对数据库中的表进行定义、改变表的结构、数据类型、表连接和约束等初始化工作）
>
>     - create ： to create objects in the database
>
>     - alter ： alter the structure of database
>
>     - drop ： delete objects from the database
>
>     - truncate ： remove all records from a table, including all spaces allocated for the records are removed
>
>       ```
>        # truncate table 速度快，效率高 在功能上不与带where自居# 的delete语句相同；二者均删除表中的全部行，但是
>        # truncate table速度更快且使用的系统和事务日志资源少
>        truncate table [table name] 
>        delete from [table name] where [where-expression]
>       ```
>
>   - DCL ： Data Control Language 数据控制语言 （用来设置或更改数据库用户或角色权限的语句）
>
>     - grant ： grant user or group permission to processing table
>     
>       ```
>       grant [privilige]{select|update...} on [table_name] to {public|group|user_name}
>       ```
>     
>     - revoke
>     
>       ```
>       revoke [privilige]{select|update...} on [table_name] from {public|group|user_name} 
>       ```
>
>   - TCL ： Transaction Control Language 事务控制语言 
>
>     - SAVEPOINT ： 设置保存点
>     - ROLLBACK ： 回滚
>     - COMMIT ： 提交事务
>     - SET TRANSACTION ： 设置当前事务的特性（名称，读写，隔离级...）
>
> * JDBC驱动：
>
>   - JDBC是一种跨平台的实现机制，是一个接口规范的定义
>   - 跨平台：实际上是指跨数据库，通过加载不同的数据库驱动来实现
>   - 提供了操作数据库的统一方式
>   - java.sql JDBC 的核心类和接口
>   - javax.sql x表示extension扩展 数据库连接池、数据源、JNDI和Rowset等高级特征
>   - JNDI ： Java Name and Directory Interface(Java命名和目录接口) 将Java对象以某个名称的方式绑定到一个容器环境中，以后调用容器环境的查找方法就可以查找出某个名称所绑定的Java对象。


`吐槽`:在用了MyEclipse感觉极差，果断投降了JetBrains的IntellJ,真的好用，强烈安利[IntelliJ下载地址][download]
项目结构：
```
├── HelloWeb
 ├── src
 │   ├── edu.example.test --测试包
 │   │ 	 └── Test.java
 │   ├── edu.example.util --工具包
 │   │	 └── DBUtil.java
 │   ├── DBConfig.properties --用来存放数据库的配置 | key:value
 ├── JRE System Library	-- JDK的类库里面是自带的jar包
 │   │ 	 └── xxx.jar
 ├── JavaEE 5 Library -- 用来支持J2EE的类库 | J2EE: Java 2 Platform Enterprise Edition 企业级的分布式应用平台规范
 │   │	 └── minima
 ├── Referenced Library -- 外部引用库 | 也就是你导入的jar包
 │   └── mysql-connector-java-8.0.19.jar
 └── WebRoot --存放jsp页面，html页面以及web配置等

```

我们在src directory下新建文件DBConfig.properties并写入数据库的配置信息，方便数据库配置变更。只需改动该配置文件，无需去改动代码

```
driver=com.mysql.cj.jdbc.Driver
url=jdbc:mysql://localhost:3306/jdbc_demo?zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai
username=root
password=123456
```

接下来我们通过获取数据库的配置信息来获得数据库连接
```
public Connection openConnection()
	{
		ResourceBundle res = ResourceBundle.getBundle("DBConfig");
		//由于driver不支持版本52.0以下的，但是1.7才支持propertes.load
		//Properties prop = new Properties();
		//InputStream in = null;
		String driver = null;
		String url = null;
		String username = null;
		String password = null;
		//接下来通过输入流获取properties文件中的配置内容
		try {
			//in = this.getClass().getClassLoader().getResourceAsStream("jdbc.properties");
			//prop.load(in)
			driver = res.getString("driver");			
			url = res.getString("url");
			username = res.getString("username");
			password = res.getString("password");
			Class.forName(driver);
			return DriverManager.getConnection(url,username,password);
		} catch (Exception e) { 
			e.printStackTrace();
		}
		return null;
	}
```


[download]:https://www.jetbrains.com/products.html#type=ide